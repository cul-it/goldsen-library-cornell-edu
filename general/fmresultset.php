<?php
/*
	fmresultset.php - accumulate FileMaker results
	
	Parse the xml generated by FileMaker using XPat
	Return the resultset in an array like this:
		result[(recordID)]["0"][(field name)] = value
		result[(recordID)][(portal table name)][(related recordID)][(field name)] = value
		
	$url = "http://128.84.158.76/fmi/xml/fmresultset.xml?-db=bathrick_metadata3&-lay=film%20data&-findany";
		
	result = fmresultset($url);
	
*/

class fmresult {
	var $recordID;
	var $field;
	var $portal_table;
	var $portal_recordID;
	var $result = array();
	var $data;
	var $accumulate;
	}
	
$fmr = new fmresult;

function start_element($parser, $name, $attrs) {
	global $fmr;
	switch ($name) {
		case "data":
			$fmr->accumulate = true;
			$fmr->data = "";
			break;
		case "field":
			$fname = isset($attrs["name"]) ? $attrs["name"] : "";
			$fmr->field = $fname;
			break;
		case "record":
			$id = isset($attrs["record-id"]) ? $attrs["record-id"] : "";
			if (empty($fmr->portal_table)) {
				$fmr->recordID = $id;
				$fmr->result[$fmr->recordID] = array();
				$fmr->result[$fmr->recordID]["0"] = array();
				}
			else {
				$fmr->portal_recordID = $id;
				$fmr->result[$fmr->recordID]["$fmr->portal_table"]["$id"] = array();
				}		
			break;
		case "relatedset":
			$table = isset($attrs["table"]) ? $attrs["table"] : "";
			$fmr->portal_recordID = -1;
			$fmr->portal_table = $table;
			$fmr->result[$fmr->recordID]["$fmr->portal_table"] = array();
			break;
		case "resultset":
			$fmr->recordID = -1;
			break;
		}
	}
	
function stop_element($parser, $name) {
	global $fmr;
	switch ($name) {
		case "data":
			if ($fmr->accumulate) {
				if (empty($fmr->portal_table)) {
					$fmr->result[$fmr->recordID]["0"]["$fmr->field"] = $fmr->data;
					}
				else {
					$fmr->result[$fmr->recordID]["$fmr->portal_table"]["$fmr->portal_recordID"]["$fmr->field"] = $fmr->data;
					}				
				$fmr->accumulate = false;
				}
			break;
		case "field":
			break;
		case "record":
			break;
		case "relatedset":
			$fmr->portal_table = "";
			break;
		case "resultset":
			break;
		}
	}
	
function char_data($parser, $data) {
	global $fmr;
	if ($fmr->accumulate) {
		$fmr->data .= $data;
		}
	}
	
function parse_from_url($parser, $url) {
    if(!($fp = @fopen($url, "r"))) 
    {
        die("Can't open \"$url\".");
    }
    
    while($data = fread($fp, 4096))
    {
        if(!xml_parse($parser, $data, feof($fp)))
        {
            return(false);
        }
    }
    
    fclose($fp);
    
    return(true);
	}

function fmresultset($url) {
	global $fmr;
		
	// Create Expat parser
	$parser = xml_parser_create();
	
	// Set handler functions
	xml_set_element_handler($parser, "start_element", "stop_element");
	xml_set_character_data_handler($parser, "char_data");
	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);

	// Parse the file
	$ret = parse_from_url($parser, $url);
	if(!$ret)
	{
	    die(sprintf("XML error: %s at line %d",
	                    xml_error_string(xml_get_error_code($parser)),
	                    xml_get_current_line_number($parser)));
	}
	
	// Free parser
	xml_parser_free($parser);
	
	return $fmr->result;
	}
?>